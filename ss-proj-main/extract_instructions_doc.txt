halt - Zaustavlja izvršavanje instrukcija:
0000 0000 0000 0000 0000 0000 0000 0000
Zaustavlja procesor kao i dalje izvršavanje narednih instrukcija.

--------------------------------

int - Izaziva softverski prekid:
0001 0000 0000 0000 0000 0000 0000 0000
Generiše softverski zahtev za prekid.
push status; push pc; cause<=4; status<=status&(~0x1); pc<=handle;

---------------------------
!!!!!!!!!!!nije dobro!!!!!!!!!!!!!
iret - pop pc; pop status; 
pop %pc - pc <= mem32[sp]; sp <= sp + 4; 
1001 MMMM AAAA BBBB CCCC DDDD DDDD DDDD
MMMM==0b0011: gpr[A]<=mem32[gpr[B]]; gpr[B]<=gpr[B]+D;
pc <= mem32[sp]; sp<=sp + 4
pop $status:
1001 MMMM AAAA BBBB CCCC DDDD DDDD DDDD
MMMM==0b0111: csr[A]<=mem32[gpr[B]]; gpr[B]<=gpr[B]+D;
status<=mem32[sp]; gpr[B]<=sp+4;
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

csrwr [%sp + 4], %status; status<=mem32[sp+4];
MMMM==0b0110: csr[A]<=mem32[gpr[B]+gpr[C]+D];
op %pc - pc <= mem32[sp]; sp <= sp + 8; !!! pazi 8 je, ne 4.
mora tako, jer da je prvo 
pop pc
pop status

status se nikada nece pop-ovati sa steka
---------------------------------

Instrukcija poziva potprograma:
$$$$$$$$$$$ NIJE DOBRO!!! $$$$$$$$$$$ moze da bude i 4 i 8 bytova ova instrukcija
call - operand push pc; pc <= operand;
0010 MMMM AAAA BBBB 0000 DDDD DDDD DDDD
MMMM==0b0000: push pc; pc<=gpr[A]+gpr[B]+D; - ako je vrednost simbola ili konstante manja od 12 bita
MMMM==0b0001: push pc; pc<=mem32[gpr[A]+gpr[B]+D]; - ako je vrednost simbola ili konstante veca od 12 bita

----------------------------------

ret - pop pc:
1001 MMMM AAAA BBBB CCCC DDDD DDDD DDDD
MMMM==0b0011: gpr[A]<=mem32[gpr[B]]; gpr[B]<=gpr[B]+D;
pc <= mem32[sp]; sp<=sp+4

-----------------------------

Instrukcija skoka:
$$$$$$$$$$$ NIJE DOBRO!!! $$$$$$$$$$$ moze da bude i 4 i 8 bytova ova instrukcija
0011 MMMM AAAA BBBB CCCC DDDD DDDD DDDD:
jmp - operand pc <= operand;
MMMM==0b0000: pc<=gpr[A]+D; - ako je vrednost simbola ili konstante manja od 12 bita
pc <= pc + D
MMMM==0b1000: pc<=mem32[gpr[A]+D]; - ako je vrednost simbola ili konstante veca od 12 bita
pc <= mem32[pc + D]

beq %gpr1, %gpr2, operand - if (gpr1 == gpr2) pc <= operand;
MMMM==0b0001: if (gpr[B] == gpr[C]) pc<=gpr[A]+D;
if (gpr[B] == gpr[C]) pc<=pc+D;
MMMM==0b1001: if (gpr[B] == gpr[C]) pc<=mem32[gpr[A]+D];
if (gpr[B] == gpr[C]) pc <= mem32[pc + D];

bne %gpr1, %gpr2, operand - if (gpr1 != gpr2) pc <= operand;
MMMM==0b0010: if (gpr[B] != gpr[C]) pc<=gpr[A]+D;
if (gpr[B] != gpr[C]) pc<= pc + D
MMMM==0b1010: if (gpr[B] != gpr[C]) pc<=mem32[gpr[A] + D];
if (gpr[B] != gpr[C]) pc <= mem32[pc + D];

bgt %gpr1, %gpr2, operand - if (gpr1 signed> gpr2) pc <= operand;
MMMM==0b0011: if (gpr[B] signed> gpr[C]) pc <= gpr[A] + D;
if (gpr[B] signed> gpr[C]) pc <= pc + D;
MMMM==0b1011: if (gpr[B] signed> gpr[C]) pc <= mem32[gpr[A] + D];
if (gpr[B] signed> gpr[C]) pc <= mem32[pc + D]

-------------------------------------

Stack operacije:
push %gpr - sp <= sp - 4; mem32[sp] <= gpr;
1000 MMMM AAAA BBBB CCCC DDDD DDDD DDDD
MMMM==0b0001: gpr[A]<=gpr[A]+D; mem32[gpr[A]]<=gpr[C];
sp<=sp - 4; mem32[sp] <= gpr[C]

pop %gpr - gpr <= mem32[sp]; sp <= sp + 4; 
1001 MMMM AAAA BBBB CCCC DDDD DDDD DDDD
MMMM==0b0011: gpr[A]<=mem32[gpr[B]]; gpr[B]<=gpr[B]+D;
gpr[A]<=mem32[sp]; sp<=sp + 4

-----------------------------------

Instrukcija atomične zamene vrednosti:
0100 0000 0000 BBBB CCCC 0000 0000 0000
xchg %gprS, %gprD temp <= gprD; gprD <= gprS; gprS <= temp;
Zamenjuje vrednost dva registra atomično bez mogućnosti da zamena bude prekinuta
usled asinhronog zahteva za prekid.
temp<=gpr[B]; gpr[B]<=gpr[C]; gpr[C]<=temp;

---------------------------------------

Instrukcija aritmetičkih operacija:
0101 MMMM AAAA BBBB CCCC 0000 0000 0000:

add %gprS, %gprD - gprD <= gprD + gprS;
MMMM==0b0000: gpr[A]<=gpr[B] + gpr[C];

sub %gprS, %gprD - gprD <= gprD - gprS;
MMMM==0b0001: gpr[A]<=gpr[B] - gpr[C]

mul %gprS, %gprD - gprD <= gprD * gprS;
MMMM==0b0010: gpr[A]<=gpr[B] * gpr[C];

div %gprS, %gprD - gprD <= gprD / gprS;
MMMM==0b0011: gpr[A]<=gpr[B] / gpr[C];

--------------------------------------------

Instrukcija logičkih operacija:
0110 MMMM AAAA BBBB CCCC 0000 0000 0000:
not %gpr - gpr <= ~gpr;
MMMM==0b0000: gpr[A]<=~gpr[B];

and %gprS, %gprD - gprD <= gprD & gprS;
MMMM==0b0001: gpr[A]<=gpr[B] & gpr[C];

or %gprS, %gprD - gprD <= gprD | gprS;
MMMM==0b0010: gpr[A]<=gpr[B] | gpr[C];

xor %gprS, %gprD - gprD <= gprD ^ gprS;
MMMM==0b0011: gpr[A]<=gpr[B] ^ gpr[C];

--------------------------------------------

Instrukcija pomeračkih operacija:
0111 MMMM AAAA BBBB CCCC 0000 0000 0000:

shl %gprS, %gprD - gprD <= gprD << gprS;
MMMM==0b0000: gpr[A]<=gpr[B] << gpr[C];

shr %gprS, %gprD - gprD <= gprD >> gprS;
MMMM==0b0001: gpr[A]<=gpr[B] >> gpr[C];

--------------------------------------

load instrukcija:
ld operand, %gpr gpr <= operand; 
1001 MMMM AAAA BBBB CCCC DDDD DDDD DDDD
$<literal>
MMMM==0b0001: gpr[A]<=gpr[B]+D; -> gpr[A] <= D za D < 12 bita ili MMMM==0b0010: gpr[A]<=mem32[gpr[B]+gpr[C]+D]; -> gpr[A]<=mem32[pc+D] za D > 12 bita

$<simbol>
MMMM==0b0001: gpr[A]<=gpr[B]+D; -> gpr[A] <= D za D < 12 bita ili MMMM==0b0010: gpr[A]<=mem32[gpr[B]+gpr[C]+D]; -> gpr[A]<=mem32[pc+D] za D > 12 bita

<literal> 
spakuje se literal na bazen i adresira se preko memorijskog indirektnog adresiranja
MMMM==0b0010: gpr[A]<=mem32[gpr[B]+gpr[C]+D]; -> gpr[A]<=mem32[pc+D]; -> da se loaduje adresa zapisana na poziciji pc+D (neka adresa spakovana)
zatim se ponovo pozove ista instrukcija:
MMMM==0b0010: gpr[A]<=mem32[gpr[B]+gpr[C]+D]; -> gpr[A]<=mem32[gpr[B]] s tim sto su A i B isti registar.

<simbol> 
MMMM==0b0010: gpr[A]<=mem32[gpr[B]+gpr[C]+D]; -> gpr[A]<=mem32[pc+D]; -> da se loaduje adresa zapisana na poziciji pc+D (neka adresa spakovana)
zatim se ponovo pozove ista instrukcija:
MMMM==0b0010: gpr[A]<=mem32[gpr[B]+gpr[C]+D]; -> gpr[A]<=mem32[gpr[B]] s tim sto su A i B isti registar.

%<reg>
MMMM==0b0001: gpr[A]<=gpr[B]+D; -> gpr[A]<=gpr[B] -> D = 0

[%<reg>]
MMMM==0b0010: gpr[A]<=mem32[gpr[B]+gpr[C]+D]; -> gpr[A]<=mem32[gpr[B]];

[%<reg> + <literal>]
samo do 12 bita
MMMM==0b0010: gpr[A]<=mem32[gpr[B]+gpr[C]+D]; -> gpr[A]<=mem32[gpr[B]+D]

[%<reg> + <simbol>]
samo do 12 bita
MMMM==0b0010: gpr[A]<=mem32[gpr[B]+gpr[C]+D]; -> gpr[A]<=mem32[gpr[B]+D]


-------------------------------------


store instrukcija:
st %gpr, operand - operand <= gpr;

$<literal> /
$<simbol> /
<literal>
1000 MMMM AAAA BBBB CCCC DDDD DDDD DDDD
smesti se literal na neku adresu i onda se preko pc+D dodje do te adrese
MMMM==0b0010: mem32[mem32[gpr[A]+gpr[B]+D]]<=gpr[C]; -> mem32[mem32[pc+D]]<=gpr[C]

<simbol> 
1000 MMMM AAAA BBBB CCCC DDDD DDDD DDDD
smesti se literal na neku adresu i onda se preko pc+D dodje do te adrese
MMMM==0b0010: mem32[mem32[gpr[A]+gpr[B]+D]]<=gpr[C]; -> mem32[mem32[pc+D]]<=gpr[C]

%<reg>
MMMM==0b0001: gpr[A]<=gpr[B]+D; -> gpr[A]<=gpr[B]  -  1001 MMMM AAAA BBBB CCCC DDDD DDDD DDDD

[%<reg>]
MMMM==0b0000: mem32[gpr[A]+gpr[B]+D]<=gpr[C]; -> mem32[gpr[A]]<=gpr[C];   -   1000 MMMM AAAA BBBB CCCC DDDD DDDD DDDD

[%<reg> + <literal>]
MMMM==0b0000: mem32[gpr[A]+gpr[B]+D]<=gpr[C]; -> mem32[gpr[A]+D]<=gpr[C];    -    1000 MMMM AAAA BBBB CCCC DDDD DDDD DDDD

[%<reg> + <simbol>]
MMMM==0b0000: mem32[gpr[A]+gpr[B]+D]<=gpr[C]; -> mem32[gpr[A]+D]<=gpr[C];    -    1000 MMMM AAAA BBBB CCCC DDDD DDDD DDDD

------------------------------------------

csrrd %csr, %gpr gpr <= csr
1001 MMMM AAAA BBBB CCCC DDDD DDDD DDDD
MMMM==0b0000: gpr[A]<=csr[B];


csrwr %gpr, %csr csr <= gpr;
1001 MMMM AAAA BBBB CCCC DDDD DDDD DDDD
MMMM==0b0100: csr[A]<=gpr[B];

---------------------------------------


The choice between R_X86_64_32S and R_X86_64_32 depends on the specific requirements of the instruction or data being relocated. 
If the value needs to be signed and represent a relative offset, R_X86_64_32S is used. 
If the value needs to be unsigned and represent an absolute address, R_X86_64_32 is used.

ako stoji na primer 
.word symbol - tada koristi R_X86_64_32 iako je simbol globalan ili ne - apsolutno se ubacuje vrednost!!!

ako stoji:
jmp symbol:
ako je globalan koristi R_X86_64_PLT32, ako je lokalan R_X86_64_PC32

ako stoji:
ld %r1, symbol -> koristi R_X86_64_PC32 - jer ce se koristiti pc relativno na simbol ?? proveriti kad se dodje do ovoga


-------------------------------------

note:

ld $symbol, %r1, to znaci da se u r1 treba ucitati adresa symbola. Ona ne moze stati u instrukciju, pa mora da kreira konstanta!!! mora da se krpi od strane linkera
ld $123123, %r1 - ovo je isto kao i ovo iznad ako je vrednost veca od 12 bita, ali se takodje ne treba krpiti. Ako je vrednost manja od 12 bita, moze stati u instrukciju
ld symbol, %r1, to znaci da ako je lokalan simbol, moze da se odmah iskoristi pc relativno i odmah uzeti, a ako je nije unutar iste sekcije, 
                onda treba da se doda cetvorobajtna vrednost na kraju sekcije, i preko pc relativno da se ucita adresa, a zatim da se ucita i sama vrednost.
                Mana, mora linker da zakrpi tu adresu.

ld 123123, %r1 - ovo se isto radi kao i ld symbol, %r1 - samo ne treba da se krpi od strane linkera, jer je vec adresa poznata


call symbol - fakticki nama treba adresa da bi je smestili u pc, tako da nam treba vrednost. Ako je symbol lokalni, onda moze pc + pomeraj, 
                ali ako je symbol u drugoj sekciji, mora da se kreira konstanta i da se zakrpi od strane linkera.

call 123123123 - posto ovo predstavlja adresu, to znaci je dovoljno da je smestimo u konstante na kraju sekcije i da je adresiramo preko mem32[pc+pomeraj]
isto vazi i za jump i ostale jump instrukcije

za st instrukciju, postoji mem32[mem32[adresa]] - tako da je dovoljno samo prebaciti adresu na kraju sekcije i adresirati na nju



najveci problem je ako se za operand javi symbol(lokalni) koji je u istoj sekciji, ali se kasnije definise :/
kako to resiti??? u tom slucaju instrukcije koje zauzimaju 8 bajtova, mogu zauzimati 4 bajta!!!

NE MOGU SE BAHCEM!!!
uradicu samo optimizaciju ako je simbol vec definisan :D